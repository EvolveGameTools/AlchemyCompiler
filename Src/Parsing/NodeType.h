#pragma once
#include "../PrimitiveTypes.h"

namespace Alchemy::Parsing {

    enum class NodeType : uint8 {

        // trivial or non visited
        None,
        File,
        Error,
        ArrayRank,

        // Declarations
        UsingStaticDeclaration,
        UsingNamespaceDeclaration,
        UsingAliasDeclaration,
        MethodDeclaration,
        LocalVariableDeclaration,
        InvalidDeclaration,
        PropertyDeclaration,
        FieldDeclaration,
        ClassDeclaration,
        LocalConstantDeclaration,
        StructDeclaration,
        EnumMemberDeclaration,
        EnumDeclaration,
        ConstantDeclaration,
        ConstructorDeclaration,
        DelegateDeclaration,
        IndexerDeclaration,
        NamespaceDeclaration,
        InterfaceDeclaration,

        // Declaration Parts
        TypeArgumentList,
        FormalParameterList,
        FormalParameter,
        TypeConstraintList,
        TypeConstraint,

        // Expression Parts
        TypePath,
        MemberAccess,
        IncrementDecrement,
        Argument,
        ArgumentList,
        MethodInvocation,
        Identifier,
        BuiltInTypeAccess,
        NullableDereference,

        SwitchExpressionArm,
        ExpressionList,
        ContextList,
        SwitchSection,
        SwitchLabel,
        CatchClause,
        MemberInitializer,
        IndexedInitializer,
        CollectionInitializer,
        ListInitializer,
        DynamicKeyValue,
        DynamicKey,
        DynamicObjectLiteral,
        DynamicArrayLiteral,
        StringPart,
        TypeParameterListNode,
        ClassBody,
        PropertyGetter,
        PropertySetter,
        LambdaParameter,

        InitializerList,
        ForLoopIterator,
        ScopeMemberAccess,
        ConditionalMemberAccess,
        ModifierList,
        ForLoopInitializer,
        ForInitializerList,
        IndexerParameterList,
        TypeList,
        NamespacePath,
        EnumMemberList,
        NamespaceOrTypeName,
        LocalVariableType,
        TypeCast,
        Literal,

        // Expressions
        TernaryExpression,
        ThrowExpression,
        NullCoalescingExpression,
        BinaryExpression,
        UnaryExpression,
        BracketExpression,
        PrimaryExpression,
        PrimaryExpressionTail,
        ThisReferenceExpression,
        BaseReferenceExpression,
        ParenExpression,
        TypeOfExpression,
        AssignmentExpression,
        IsExpression,
        AsExpression,
        SwitchExpression,
        TryExpression,
        NewExpression,
        LambdaExpression,
        RefExpression,
        NewDynamicObjectLiteralExpression,
        NewDynamicArrayLiteralExpression,

        // Statements
        BlockStatement,
        TryBlock,
        EmptyStatement,
        BreakStatement,
        ContinueStatement,
        ReturnStatement,
        UsingStatementBlock,
        IfStatement,
        WhileStatement,
        DoWhileStatement,
        ForLoopStatement,
        ForEachLoopStatement,
        SwitchStatement,
        ThrowStatement,
        ExpressionStatement,
        TrailingLambdaStatement,
        WithStatement,
        UsingStatementScope,
        PrimaryMethodInvocation,
    };

    const char* NodeTypeToString(NodeType e);

}