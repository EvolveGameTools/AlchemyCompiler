#pragma once

#include "../PrimitiveTypes.h"

namespace Alchemy::Compilation {

    enum class SyntaxKind : uint8 {
        None,
        ListKind, // for holding lists, not a real usable type in the language

        // --- Reserved Keyword
        __FirstKeyword__,
        FixedKeyword,
        // todo -- int32 etc
        BoolKeyword,
        ByteKeyword,
        SByteKeyword,
        ShortKeyword,
        UShortKeyword,
        IntKeyword,
        UIntKeyword,
        LongKeyword,
        ULongKeyword,
        DoubleKeyword,
        FloatKeyword,
        StringKeyword,
        CharKeyword,
        VoidKeyword,
        ObjectKeyword,
        TypeOfKeyword,
        SizeOfKeyword,
        NullKeyword,
        TrueKeyword,
        FalseKeyword,
        IfKeyword,
        ElseKeyword,
        WhileKeyword,
        ForKeyword,
        ForEachKeyword,
        DoKeyword,
        SwitchKeyword,
        CaseKeyword,
        DefaultKeyword,
        TryKeyword,
        CatchKeyword,
        FinallyKeyword,
        BreakKeyword,
        ContinueKeyword,
        ReturnKeyword,
        ThrowKeyword,
        PublicKeyword,
        PrivateKeyword,
        InternalKeyword,
        ProtectedKeyword,
        StaticKeyword,
        ReadOnlyKeyword,
        SealedKeyword,
        ConstKeyword,
        NewKeyword,
        OverrideKeyword,
        AbstractKeyword,
        VirtualKeyword,
        ExternKeyword,
        RefKeyword,
        OutKeyword,
        InKeyword,
        IsKeyword,
        AsKeyword,
        ParamsKeyword,
        ThisKeyword,
        BaseKeyword,
        NamespaceKeyword,
        UsingKeyword,
        ClassKeyword,
        StructKeyword,
        InterfaceKeyword,
        EnumKeyword,
        DelegateKeyword,
        OperatorKeyword,
        ExplicitKeyword,
        NameofKeyword,
        ImplicitKeyword,
        VarKeyword,
        StackAllocKeyword,
        ElifKeyword,
        EndIfKeyword,
        NameOfKeyword,

        __LastKeyword__,
        // --- End Reserved Keywords

        // --- Contextual Keywords
        __FirstContextualKeyword__,
        PartialKeyword,
        AliasKeyword,
//        GlobalKeyword,
        GetKeyword,
        SetKeyword,
        WhereKeyword,
        FromKeyword,
        WhenKeyword,
        OrKeyword,
        AndKeyword,
        NotKeyword,
        WithKeyword,
        InitKeyword,
        RequiredKeyword,
        __LastContextualKeyword__,
        // --- End Contextual Keywords

        // --- Tokens
        __FirstToken__,
        IdentifierToken,
        SlashEqualsToken,
        SlashToken,
        DotToken,
        DotDotToken,
        DotDotDotToken,
        CommaToken,
        ColonColonToken,
        ColonToken,
        SemicolonToken,
        TildeToken,
        ExclamationToken,
        ExclamationEqualsToken,
        EqualsEqualsToken,
        EqualsGreaterThanToken,
        EqualsToken,
        AsteriskEqualsToken,
        AsteriskToken,
        OpenParenToken,
        CloseParenToken,
        OpenBraceToken,
        CloseBraceToken,
        OpenBracketToken,
        CloseBracketToken,
        QuestionQuestionEqualsToken,
        QuestionQuestionToken,
        QuestionToken,
        PlusEqualsToken,
        PlusPlusToken,
        PlusToken,
        MinusEqualsToken,
        MinusMinusToken,
        MinusGreaterThanToken,
        MinusToken,
        PercentToken,
        PercentEqualsToken,
        AmpersandEqualsToken,
        AmpersandAmpersandToken,
        AmpersandToken,
        CaretEqualsToken,
        CaretToken,
        BarEqualsToken,
        BarBarToken,
        BarToken,
        LessThanEqualsToken,
        LessThanLessThanEqualsToken,
        LessThanLessThanToken,
        LessThanToken,
        GreaterThanToken,
        GreaterThanEqualsToken,
        NumericLiteralToken,
        StringLiteralToken,
        EndOfFileToken,
        CharacterLiteralToken,
        GreaterThanGreaterThanToken,
        GreaterThanGreaterThanGreaterThanToken,
        GreaterThanGreaterThanEqualsToken,
        GreaterThanGreaterThanGreaterThanEqualsToken,
        UnderscoreToken,
        DollarToken,
        BackslashToken,
        DoubleQuoteToken,
        SingleQuoteToken,
        HashToken,
        OmittedArraySizeExpressionToken,
        __LastToken__,
        // --- End Tokens

        // todo -- seriously considering moving these to another type

        // -- Start Expressions
        __FirstExpression__,
        UnaryPlusExpression,
        UnaryMinusExpression,
        BitwiseNotExpression,
        LogicalNotExpression,
        PreIncrementExpression,
        PreDecrementExpression,
        AddressOfExpression,
        PointerIndirectionExpression,
        IndexExpression,
        PostIncrementExpression,
        PostDecrementExpression,
        CoalesceExpression,
        IsExpression,
        AsExpression,
        BitwiseOrExpression,
        ExclusiveOrExpression,
        BitwiseAndExpression,
        EqualsExpression,
        NotEqualsExpression,
        LessThanExpression,
        LessThanOrEqualExpression,
        GreaterThanExpression,
        GreaterThanOrEqualExpression,
        LeftShiftExpression,
        RightShiftExpression,
        UnsignedRightShiftExpression,
        AddExpression,
        SubtractExpression,
        MultiplyExpression,
        DivideExpression,
        ModuloExpression,
        LogicalAndExpression,
        LogicalOrExpression,
        OmittedArraySizeExpression,

        __LastExpression__,
        // -- End Expressions


        IdentifierName,
        QualifiedName,
        GenericName,
        ArrayRankSpecifier,
        TupleElement,

        TypeArgumentList,

        TupleType,
        NullableType,
        RefType,
        ArrayType,
        PredefinedType,

    };

    const char* SyntaxKindToString(SyntaxKind kind);

}