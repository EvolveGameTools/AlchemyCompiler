#include "./SyntaxKind.h"

namespace Alchemy::Compilation {

// --- Generate SyntaxKindToString Start
    const char* SyntaxKindToString(SyntaxKind e) {
        switch(e) {
            case SyntaxKind::None: return "None";
            case SyntaxKind::ListKind: return "ListKind";
            case SyntaxKind::__FirstKeyword__: return "__FirstKeyword__";
            case SyntaxKind::FixedKeyword: return "FixedKeyword";
            case SyntaxKind::BoolKeyword: return "BoolKeyword";
            case SyntaxKind::ByteKeyword: return "ByteKeyword";
            case SyntaxKind::SByteKeyword: return "SByteKeyword";
            case SyntaxKind::ShortKeyword: return "ShortKeyword";
            case SyntaxKind::UShortKeyword: return "UShortKeyword";
            case SyntaxKind::IntKeyword: return "IntKeyword";
            case SyntaxKind::UIntKeyword: return "UIntKeyword";
            case SyntaxKind::LongKeyword: return "LongKeyword";
            case SyntaxKind::ULongKeyword: return "ULongKeyword";
            case SyntaxKind::DoubleKeyword: return "DoubleKeyword";
            case SyntaxKind::FloatKeyword: return "FloatKeyword";
            case SyntaxKind::StringKeyword: return "StringKeyword";
            case SyntaxKind::CharKeyword: return "CharKeyword";
            case SyntaxKind::VoidKeyword: return "VoidKeyword";
            case SyntaxKind::ObjectKeyword: return "ObjectKeyword";
            case SyntaxKind::TypeOfKeyword: return "TypeOfKeyword";
            case SyntaxKind::SizeOfKeyword: return "SizeOfKeyword";
            case SyntaxKind::NullKeyword: return "NullKeyword";
            case SyntaxKind::TrueKeyword: return "TrueKeyword";
            case SyntaxKind::FalseKeyword: return "FalseKeyword";
            case SyntaxKind::IfKeyword: return "IfKeyword";
            case SyntaxKind::ElseKeyword: return "ElseKeyword";
            case SyntaxKind::WhileKeyword: return "WhileKeyword";
            case SyntaxKind::ForKeyword: return "ForKeyword";
            case SyntaxKind::ForEachKeyword: return "ForEachKeyword";
            case SyntaxKind::DoKeyword: return "DoKeyword";
            case SyntaxKind::SwitchKeyword: return "SwitchKeyword";
            case SyntaxKind::CaseKeyword: return "CaseKeyword";
            case SyntaxKind::DefaultKeyword: return "DefaultKeyword";
            case SyntaxKind::TryKeyword: return "TryKeyword";
            case SyntaxKind::CatchKeyword: return "CatchKeyword";
            case SyntaxKind::FinallyKeyword: return "FinallyKeyword";
            case SyntaxKind::BreakKeyword: return "BreakKeyword";
            case SyntaxKind::ContinueKeyword: return "ContinueKeyword";
            case SyntaxKind::ReturnKeyword: return "ReturnKeyword";
            case SyntaxKind::ThrowKeyword: return "ThrowKeyword";
            case SyntaxKind::PublicKeyword: return "PublicKeyword";
            case SyntaxKind::PrivateKeyword: return "PrivateKeyword";
            case SyntaxKind::InternalKeyword: return "InternalKeyword";
            case SyntaxKind::ProtectedKeyword: return "ProtectedKeyword";
            case SyntaxKind::StaticKeyword: return "StaticKeyword";
            case SyntaxKind::ReadOnlyKeyword: return "ReadOnlyKeyword";
            case SyntaxKind::SealedKeyword: return "SealedKeyword";
            case SyntaxKind::ConstKeyword: return "ConstKeyword";
            case SyntaxKind::NewKeyword: return "NewKeyword";
            case SyntaxKind::OverrideKeyword: return "OverrideKeyword";
            case SyntaxKind::AbstractKeyword: return "AbstractKeyword";
            case SyntaxKind::VirtualKeyword: return "VirtualKeyword";
            case SyntaxKind::ExternKeyword: return "ExternKeyword";
            case SyntaxKind::RefKeyword: return "RefKeyword";
            case SyntaxKind::OutKeyword: return "OutKeyword";
            case SyntaxKind::InKeyword: return "InKeyword";
            case SyntaxKind::IsKeyword: return "IsKeyword";
            case SyntaxKind::AsKeyword: return "AsKeyword";
            case SyntaxKind::ParamsKeyword: return "ParamsKeyword";
            case SyntaxKind::ThisKeyword: return "ThisKeyword";
            case SyntaxKind::BaseKeyword: return "BaseKeyword";
            case SyntaxKind::NamespaceKeyword: return "NamespaceKeyword";
            case SyntaxKind::UsingKeyword: return "UsingKeyword";
            case SyntaxKind::ClassKeyword: return "ClassKeyword";
            case SyntaxKind::StructKeyword: return "StructKeyword";
            case SyntaxKind::InterfaceKeyword: return "InterfaceKeyword";
            case SyntaxKind::EnumKeyword: return "EnumKeyword";
            case SyntaxKind::DelegateKeyword: return "DelegateKeyword";
            case SyntaxKind::OperatorKeyword: return "OperatorKeyword";
            case SyntaxKind::ExplicitKeyword: return "ExplicitKeyword";
            case SyntaxKind::NameofKeyword: return "NameofKeyword";
            case SyntaxKind::ImplicitKeyword: return "ImplicitKeyword";
            case SyntaxKind::VarKeyword: return "VarKeyword";
            case SyntaxKind::StackAllocKeyword: return "StackAllocKeyword";
            case SyntaxKind::ElifKeyword: return "ElifKeyword";
            case SyntaxKind::EndIfKeyword: return "EndIfKeyword";
            case SyntaxKind::NameOfKeyword: return "NameOfKeyword";
            case SyntaxKind::__LastKeyword__: return "__LastKeyword__";
            case SyntaxKind::__FirstContextualKeyword__: return "__FirstContextualKeyword__";
            case SyntaxKind::PartialKeyword: return "PartialKeyword";
            case SyntaxKind::AliasKeyword: return "AliasKeyword";
            case SyntaxKind::GetKeyword: return "GetKeyword";
            case SyntaxKind::SetKeyword: return "SetKeyword";
            case SyntaxKind::WhereKeyword: return "WhereKeyword";
            case SyntaxKind::FromKeyword: return "FromKeyword";
            case SyntaxKind::WhenKeyword: return "WhenKeyword";
            case SyntaxKind::OrKeyword: return "OrKeyword";
            case SyntaxKind::AndKeyword: return "AndKeyword";
            case SyntaxKind::NotKeyword: return "NotKeyword";
            case SyntaxKind::WithKeyword: return "WithKeyword";
            case SyntaxKind::InitKeyword: return "InitKeyword";
            case SyntaxKind::RequiredKeyword: return "RequiredKeyword";
            case SyntaxKind::__LastContextualKeyword__: return "__LastContextualKeyword__";
            case SyntaxKind::__FirstToken__: return "__FirstToken__";
            case SyntaxKind::IdentifierToken: return "IdentifierToken";
            case SyntaxKind::SlashEqualsToken: return "SlashEqualsToken";
            case SyntaxKind::SlashToken: return "SlashToken";
            case SyntaxKind::DotToken: return "DotToken";
            case SyntaxKind::DotDotToken: return "DotDotToken";
            case SyntaxKind::DotDotDotToken: return "DotDotDotToken";
            case SyntaxKind::CommaToken: return "CommaToken";
            case SyntaxKind::ColonColonToken: return "ColonColonToken";
            case SyntaxKind::ColonToken: return "ColonToken";
            case SyntaxKind::SemicolonToken: return "SemicolonToken";
            case SyntaxKind::TildeToken: return "TildeToken";
            case SyntaxKind::ExclamationToken: return "ExclamationToken";
            case SyntaxKind::ExclamationEqualsToken: return "ExclamationEqualsToken";
            case SyntaxKind::EqualsEqualsToken: return "EqualsEqualsToken";
            case SyntaxKind::EqualsGreaterThanToken: return "EqualsGreaterThanToken";
            case SyntaxKind::EqualsToken: return "EqualsToken";
            case SyntaxKind::AsteriskEqualsToken: return "AsteriskEqualsToken";
            case SyntaxKind::AsteriskToken: return "AsteriskToken";
            case SyntaxKind::OpenParenToken: return "OpenParenToken";
            case SyntaxKind::CloseParenToken: return "CloseParenToken";
            case SyntaxKind::OpenBraceToken: return "OpenBraceToken";
            case SyntaxKind::CloseBraceToken: return "CloseBraceToken";
            case SyntaxKind::OpenBracketToken: return "OpenBracketToken";
            case SyntaxKind::CloseBracketToken: return "CloseBracketToken";
            case SyntaxKind::QuestionQuestionEqualsToken: return "QuestionQuestionEqualsToken";
            case SyntaxKind::QuestionQuestionToken: return "QuestionQuestionToken";
            case SyntaxKind::QuestionToken: return "QuestionToken";
            case SyntaxKind::PlusEqualsToken: return "PlusEqualsToken";
            case SyntaxKind::PlusPlusToken: return "PlusPlusToken";
            case SyntaxKind::PlusToken: return "PlusToken";
            case SyntaxKind::MinusEqualsToken: return "MinusEqualsToken";
            case SyntaxKind::MinusMinusToken: return "MinusMinusToken";
            case SyntaxKind::MinusGreaterThanToken: return "MinusGreaterThanToken";
            case SyntaxKind::MinusToken: return "MinusToken";
            case SyntaxKind::PercentToken: return "PercentToken";
            case SyntaxKind::PercentEqualsToken: return "PercentEqualsToken";
            case SyntaxKind::AmpersandEqualsToken: return "AmpersandEqualsToken";
            case SyntaxKind::AmpersandAmpersandToken: return "AmpersandAmpersandToken";
            case SyntaxKind::AmpersandToken: return "AmpersandToken";
            case SyntaxKind::CaretEqualsToken: return "CaretEqualsToken";
            case SyntaxKind::CaretToken: return "CaretToken";
            case SyntaxKind::BarEqualsToken: return "BarEqualsToken";
            case SyntaxKind::BarBarToken: return "BarBarToken";
            case SyntaxKind::BarToken: return "BarToken";
            case SyntaxKind::LessThanEqualsToken: return "LessThanEqualsToken";
            case SyntaxKind::LessThanLessThanEqualsToken: return "LessThanLessThanEqualsToken";
            case SyntaxKind::LessThanLessThanToken: return "LessThanLessThanToken";
            case SyntaxKind::LessThanToken: return "LessThanToken";
            case SyntaxKind::GreaterThanToken: return "GreaterThanToken";
            case SyntaxKind::GreaterThanEqualsToken: return "GreaterThanEqualsToken";
            case SyntaxKind::NumericLiteralToken: return "NumericLiteralToken";
            case SyntaxKind::StringLiteralToken: return "StringLiteralToken";
            case SyntaxKind::EndOfFileToken: return "EndOfFileToken";
            case SyntaxKind::CharacterLiteralToken: return "CharacterLiteralToken";
            case SyntaxKind::GreaterThanGreaterThanToken: return "GreaterThanGreaterThanToken";
            case SyntaxKind::GreaterThanGreaterThanGreaterThanToken: return "GreaterThanGreaterThanGreaterThanToken";
            case SyntaxKind::GreaterThanGreaterThanEqualsToken: return "GreaterThanGreaterThanEqualsToken";
            case SyntaxKind::GreaterThanGreaterThanGreaterThanEqualsToken: return "GreaterThanGreaterThanGreaterThanEqualsToken";
            case SyntaxKind::UnderscoreToken: return "UnderscoreToken";
            case SyntaxKind::DollarToken: return "DollarToken";
            case SyntaxKind::BackslashToken: return "BackslashToken";
            case SyntaxKind::DoubleQuoteToken: return "DoubleQuoteToken";
            case SyntaxKind::SingleQuoteToken: return "SingleQuoteToken";
            case SyntaxKind::HashToken: return "HashToken";
            case SyntaxKind::OmittedArraySizeExpressionToken: return "OmittedArraySizeExpressionToken";
            case SyntaxKind::__LastToken__: return "__LastToken__";
            case SyntaxKind::__FirstExpression__: return "__FirstExpression__";
            case SyntaxKind::UnaryPlusExpression: return "UnaryPlusExpression";
            case SyntaxKind::UnaryMinusExpression: return "UnaryMinusExpression";
            case SyntaxKind::BitwiseNotExpression: return "BitwiseNotExpression";
            case SyntaxKind::LogicalNotExpression: return "LogicalNotExpression";
            case SyntaxKind::PreIncrementExpression: return "PreIncrementExpression";
            case SyntaxKind::PreDecrementExpression: return "PreDecrementExpression";
            case SyntaxKind::AddressOfExpression: return "AddressOfExpression";
            case SyntaxKind::PointerIndirectionExpression: return "PointerIndirectionExpression";
            case SyntaxKind::IndexExpression: return "IndexExpression";
            case SyntaxKind::PostIncrementExpression: return "PostIncrementExpression";
            case SyntaxKind::PostDecrementExpression: return "PostDecrementExpression";
            case SyntaxKind::CoalesceExpression: return "CoalesceExpression";
            case SyntaxKind::IsExpression: return "IsExpression";
            case SyntaxKind::AsExpression: return "AsExpression";
            case SyntaxKind::BitwiseOrExpression: return "BitwiseOrExpression";
            case SyntaxKind::ExclusiveOrExpression: return "ExclusiveOrExpression";
            case SyntaxKind::BitwiseAndExpression: return "BitwiseAndExpression";
            case SyntaxKind::EqualsExpression: return "EqualsExpression";
            case SyntaxKind::NotEqualsExpression: return "NotEqualsExpression";
            case SyntaxKind::LessThanExpression: return "LessThanExpression";
            case SyntaxKind::LessThanOrEqualExpression: return "LessThanOrEqualExpression";
            case SyntaxKind::GreaterThanExpression: return "GreaterThanExpression";
            case SyntaxKind::GreaterThanOrEqualExpression: return "GreaterThanOrEqualExpression";
            case SyntaxKind::LeftShiftExpression: return "LeftShiftExpression";
            case SyntaxKind::RightShiftExpression: return "RightShiftExpression";
            case SyntaxKind::UnsignedRightShiftExpression: return "UnsignedRightShiftExpression";
            case SyntaxKind::AddExpression: return "AddExpression";
            case SyntaxKind::SubtractExpression: return "SubtractExpression";
            case SyntaxKind::MultiplyExpression: return "MultiplyExpression";
            case SyntaxKind::DivideExpression: return "DivideExpression";
            case SyntaxKind::ModuloExpression: return "ModuloExpression";
            case SyntaxKind::LogicalAndExpression: return "LogicalAndExpression";
            case SyntaxKind::LogicalOrExpression: return "LogicalOrExpression";
            case SyntaxKind::OmittedArraySizeExpression: return "OmittedArraySizeExpression";
            case SyntaxKind::__LastExpression__: return "__LastExpression__";
            case SyntaxKind::IdentifierName: return "IdentifierName";
            case SyntaxKind::QualifiedName: return "QualifiedName";
            case SyntaxKind::GenericName: return "GenericName";
            case SyntaxKind::ArrayRankSpecifier: return "ArrayRankSpecifier";
            case SyntaxKind::TupleElement: return "TupleElement";
            case SyntaxKind::TypeArgumentList: return "TypeArgumentList";
            case SyntaxKind::TupleType: return "TupleType";
            case SyntaxKind::NullableType: return "NullableType";
            case SyntaxKind::RefType: return "RefType";
            case SyntaxKind::ArrayType: return "ArrayType";
            case SyntaxKind::PredefinedType: return "PredefinedType";
            default: return "";
        }
    }

// --- Generate SyntaxKindToString End

}