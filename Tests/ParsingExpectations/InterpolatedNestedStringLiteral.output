StringLiteralExpression [1:1 - 1:61]
    start = StringLiteralStart  "  [1:1 - 1:2]
    parts = SyntaxList [1:2 - 1:60]
        StringLiteralPartSyntax [1:2 - 1:10]
            part = StringLiteralPart  this is   [1:2 - 1:10]
        InterpolatedStringExpressionSyntax [1:10 - 1:60]
            start = InterpolatedExpressionStart  ${  [1:10 - 1:12]
            expression = InvocationExpressionSyntax [1:12 - 1:59]
                expression = IdentifierNameSyntax [1:12 - 1:26]
                    identifier = IdentifierToken  SomeExpression  [1:12 - 1:26]
                argumentList = ArgumentListSyntax [1:26 - 1:59]
                    openToken = OpenParenToken  (  [1:26 - 1:27]
                    arguments = SeparatedSyntaxList [1:27 - 1:58]
                        ArgumentSyntax [1:27 - 1:58]
                            nameColon = nullptr
                            refKindKeyword = <unset> 
                            expression = StringLiteralExpression [1:27 - 1:58]
                                start = StringLiteralStart  "  [1:27 - 1:28]
                                parts = SyntaxList [1:28 - 1:57]
                                    StringLiteralPartSyntax [1:28 - 1:33]
                                        part = StringLiteralPart  also   [1:28 - 1:33]
                                    InterpolatedStringExpressionSyntax [1:33 - 1:48]
                                        start = InterpolatedExpressionStart  ${  [1:33 - 1:35]
                                        expression = IdentifierNameSyntax [1:35 - 1:47]
                                            identifier = IdentifierToken  interpolated  [1:35 - 1:47]
                                        end = InterpolatedExpressionEnd  }  [1:47 - 1:48]
                                    StringLiteralPartSyntax [1:48 - 1:57]
                                        part = StringLiteralPart   you see?  [1:48 - 1:57]
                                end = StringLiteralEnd  "  [1:57 - 1:58]
                    closeToken = CloseParenToken  )  [1:58 - 1:59]
            end = InterpolatedExpressionEnd  }  [1:59 - 1:60]
    end = StringLiteralEnd  "  [1:60 - 1:61]
