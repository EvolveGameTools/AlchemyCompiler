SwitchExpressionSyntax [2:1 - 6:2] 
    governingExpression = IdentifierNameSyntax [2:1 - 2:5] 
        identifier = IdentifierToken -> "expr" [2:1 - 2:5] 
    switchKeyword = SwitchKeyword -> "switch" [2:6 - 2:12] 
    openBraceToken = OpenBraceToken -> "{" [2:13 - 2:14] 
    arms = SeparatedSyntaxList [3:5 - 5:11] 
        SwitchExpressionArmSyntax [3:5 - 3:13] 
            pattern = ConstantPatternSyntax [3:5 - 3:7] 
                expression = LiteralExpressionSyntax [3:5 - 3:7] 
                    literal = NumericLiteralToken (Int32Literal) -> "10" [3:5 - 3:7] 
            whenClause = nullptr
            equalsGreaterThanToken = EqualsGreaterThanToken -> "=>" [3:8 - 3:10] 
            expression = LiteralExpressionSyntax [3:11 - 3:13] 
                literal = NumericLiteralToken (Int32Literal) -> "12" [3:11 - 3:13] 
        CommaToken -> "," [3:13 - 3:14] 
        SwitchExpressionArmSyntax [4:5 - 4:13] 
            pattern = ConstantPatternSyntax [4:5 - 4:7] 
                expression = LiteralExpressionSyntax [4:5 - 4:7] 
                    literal = NumericLiteralToken (Int32Literal) -> "11" [4:5 - 4:7] 
            whenClause = nullptr
            equalsGreaterThanToken = EqualsGreaterThanToken -> "=>" [4:8 - 4:10] 
            expression = LiteralExpressionSyntax [4:11 - 4:13] 
                literal = NumericLiteralToken (Int32Literal) -> "13" [4:11 - 4:13] 
        CommaToken -> "," [4:13 - 4:14] 
        SwitchExpressionArmSyntax [5:5 - 5:11] 
            pattern = DiscardPatternSyntax [5:5 - 5:6] 
                underscore = UnderscoreToken -> "_" [5:5 - 5:6] 
            whenClause = nullptr
            equalsGreaterThanToken = EqualsGreaterThanToken -> "=>" [5:7 - 5:9] 
            expression = LiteralExpressionSyntax [5:10 - 5:11] 
                literal = NumericLiteralToken (Int32Literal) -> "0" [5:10 - 5:11] 
    closeBraceToken = CloseBraceToken -> "}" [6:1 - 6:2] 
