StringLiteralExpression [1:1 - 1:46]
    start = StringLiteralStart  "  [1:1 - 1:2]
    parts = SyntaxList [1:2 - 1:45]
        StringLiteralPartSyntax [1:2 - 1:8]
            part = StringLiteralPart  hello   [1:2 - 1:8]
        InterpolatedStringExpressionSyntax [1:8 - 1:27]
            start = InterpolatedExpressionStart  ${  [1:8 - 1:10]
            expression = InvocationExpressionSyntax [1:10 - 1:26]
                expression = IdentifierNameSyntax [1:10 - 1:24]
                    identifier = IdentifierToken  SomeExpression  [1:10 - 1:24]
                argumentList = ArgumentListSyntax [1:24 - 1:26]
                    openToken = OpenParenToken  (  [1:24 - 1:25]
                    arguments = SeparatedSyntaxList <empty>
                    closeToken = CloseParenToken  )  [1:25 - 1:26]
            end = InterpolatedExpressionEnd  }  [1:26 - 1:27]
        StringLiteralPartSyntax [1:27 - 1:45]
            part = StringLiteralPart  , this is a string  [1:27 - 1:45]
    end = StringLiteralEnd  "  [1:45 - 1:46]
